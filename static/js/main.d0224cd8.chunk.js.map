{"version":3,"sources":["SortingAlgorithms/MergeSort.js","SortingAlgorithms/BubbleSort.js","SortingAlgorithms/QuickSort.js","SortingVisualizer/SortingVisualizer.jsx","SortingAlgorithms/InsertionSort.js","SortingAlgorithms/SelectionSort.js","App.js","serviceWorker.js","index.js"],"names":["getMergeSortAnimations","array","animations","length","auxiliaryArray","slice","mergeSortHelper","mainArray","startIdx","endIdx","middleIdx","Math","floor","k","i","j","push","doMerge","getBubbleSortAnimations","isSorted","counter","swap","bubbleSortHelper","temp","getQuickSortAnimations","auxillaryArray","quickSort","startIndex","endIndex","pivotIndex","pivot","partitionArray","javaScriptSortedArray","sort","a","b","console","log","firstArray","secondArray","arraysAreEqual","firstIndex","secondIndex","SortingVisualizer","props","state","this","resetArray","min","max","random","setState","runAnimations","len","num","insertionSortHelper","getInsertionSortAnimations","smallest","smallestIdx","selectionsSortHelper","getSelectionSortAnimations","isColorChange","arrayBars","document","getElementsByClassName","color","barOneIndex","barTwoIndex","barOneStyle","style","barTwoStyle","setTimeout","backgroundColor","barIndex","newHeight","barStyle","height","RESTORE_TIME","parseInt","barOneIdx","barTwoIdx","window","location","reload","className","onClick","bubbleSort","insertionSort","selectionSort","mergeSort","refresh","map","value","idx","key","React","Component","App","Boolean","hostname","match","ReactDOM","render","StrictMode","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.d0224cd8.chunk.js","sourcesContent":["export function getMergeSortAnimations(array) {\n    const animations = [];\n    if (array.length <= 1) return array;\n    const auxiliaryArray = array.slice();\n    mergeSortHelper(array, 0, array.length - 1, auxiliaryArray, animations);\n    return animations;\n  }\n  \n  function mergeSortHelper(\n    mainArray,\n    startIdx,\n    endIdx,\n    auxiliaryArray,\n    animations,\n  ) {\n    if (startIdx === endIdx) return;\n    const middleIdx = Math.floor((startIdx + endIdx) / 2);\n    mergeSortHelper(auxiliaryArray, startIdx, middleIdx, mainArray, animations);\n    mergeSortHelper(auxiliaryArray, middleIdx + 1, endIdx, mainArray, animations);\n    doMerge(mainArray, startIdx, middleIdx, endIdx, auxiliaryArray, animations);\n  }\n  \n  function doMerge(\n    mainArray,\n    startIdx,\n    middleIdx,\n    endIdx,\n    auxiliaryArray,\n    animations,\n  ) {\n    let k = startIdx;\n    let i = startIdx;\n    let j = middleIdx + 1;\n    while (i <= middleIdx && j <= endIdx) {\n      // These are the values that we're comparing; we push them once\n      // to change their color.\n      animations.push([i, j]);\n      // These are the values that we're comparing; we push them a second\n      // time to revert their color.\n      animations.push([i, j]);\n      if (auxiliaryArray[i] <= auxiliaryArray[j]) {\n        // We overwrite the value at index k in the original array with the\n        // value at index i in the auxiliary array.\n        animations.push([k, auxiliaryArray[i]]);\n        mainArray[k++] = auxiliaryArray[i++];\n      } else {\n        // We overwrite the value at index k in the original array with the\n        // value at index j in the auxiliary array.\n        animations.push([k, auxiliaryArray[j]]);\n        mainArray[k++] = auxiliaryArray[j++];\n      }\n    }\n    while (i <= middleIdx) {\n      // These are the values that we're comparing; we push them once\n      // to change their color.\n      animations.push([i, i]);\n      // These are the values that we're comparing; we push them a second\n      // time to revert their color.\n      animations.push([i, i]);\n      // We overwrite the value at index k in the original array with the\n      // value at index i in the auxiliary array.\n      animations.push([k, auxiliaryArray[i]]);\n      mainArray[k++] = auxiliaryArray[i++];\n    }\n    while (j <= endIdx) {\n      // These are the values that we're comparing; we push them once\n      // to change their color.\n      animations.push([j, j]);\n      // These are the values that we're comparing; we push them a second\n      // time to revert their color.\n      animations.push([j, j]);\n      // We overwrite the value at index k in the original array with the\n      // value at index j in the auxiliary array.\n      animations.push([k, auxiliaryArray[j]]);\n      mainArray[k++] = auxiliaryArray[j++];\n    }\n  }\n\n ","export function getBubbleSortAnimations(array){\n    const animations = [];\n    if(array.length <= 1){\n      return array;\n    }\n    bubbleSortHelper(array, 0, array.length, animations);\n    return animations;\n  }\n\n  function bubbleSortHelper(array, startIdx, endIdx, animations){\n    if(startIdx === endIdx){\n      return;\n    }\n    let isSorted = false;\n    let counter = 0;\n    while(!isSorted){\n      isSorted = true;\n      for(let i = startIdx; i < endIdx - counter; i++){\n        if(array[i] > array[i + 1]){\n          swap(i, i+ 1, array);\n          isSorted = false;\n        }\n        animations.push([i, i]);\n        animations.push([i, i]);\n        animations.push([i, array[i]]);\n      }\n      counter++;\n    }\n  }\n\n  function swap(i, j, array){\n    let temp = array[j];\n    array[j] = array[i];\n    array[i] = temp;\n  }","export function getQuickSortAnimations(array) {\n    let animations  = [];\n    let auxillaryArray = array.slice();\n    quickSort(auxillaryArray, 0, auxillaryArray.length - 1, animations);\n    const javaScriptSortedArray = array.slice().sort((a, b) => a - b);\n    console.log(\"sort works correctly? \",arraysAreEqual(javaScriptSortedArray, auxillaryArray));\n    array = auxillaryArray;\n    return [animations, array];\n}\n\ngetQuickSortAnimations([7,2,1,6]);\n\nfunction quickSort(auxillaryArray, startIndex, endIndex, animations) {\n    let pivotIndex;\n    if (startIndex < endIndex) {\n        pivotIndex = partitionArray(auxillaryArray, startIndex, endIndex, animations);\n        quickSort(auxillaryArray, startIndex, pivotIndex - 1, animations);\n        quickSort(auxillaryArray, pivotIndex + 1, endIndex, animations);\n    }\n}\n\nfunction partitionArray(auxillaryArray, startIndex, endIndex, animations) {\n    let pivot = auxillaryArray[endIndex];\n    let pivotIndex = startIndex;\n    for (let i = startIndex; i <= endIndex - 1; i++) {\n        animations.push([i, endIndex]);\n        animations.push([i, endIndex]);\n        if (auxillaryArray[i] <= pivot) {\n            //Swap these two heights\n            animations.push([i, auxillaryArray[pivotIndex]]);\n            animations.push([pivotIndex, auxillaryArray[i]]);\n            swap(auxillaryArray, i , pivotIndex);\n            pivotIndex++;\n        }\n        else {\n            animations.push([-1, -1]);\n            animations.push([-1, -1]);\n        }\n        animations.push([-1, -1]);\n        animations.push([-1, -1]);\n    }\n    animations.push([-1, -1]);\n    animations.push([-1, -1]);\n    animations.push([-1, -1]);\n    animations.push([-1, -1]);\n    //Swap these two heights\n    animations.push([pivotIndex, auxillaryArray[endIndex]]);\n    animations.push([endIndex, auxillaryArray[pivotIndex]]);\n    swap(auxillaryArray, pivotIndex, endIndex);\n    return pivotIndex;\n}\n\nfunction swap(auxillaryArray, firstIndex, secondIndex) {\n    let temp = auxillaryArray[firstIndex];\n    auxillaryArray[firstIndex] = auxillaryArray[secondIndex];\n    auxillaryArray[secondIndex] = temp;\n}\n\nfunction arraysAreEqual(firstArray, secondArray) {\n    if (firstArray.length !== secondArray.length) {\n        return false;\n    }\n    for (let i = 0; i < firstArray.length; i++) {\n      if (firstArray[i] !== secondArray[i]) {\n        return false;\n      }\n    }\n    return true;\n}","import React from 'react';\nimport './SortingVisualizer.css';\nimport {getMergeSortAnimations} from '../SortingAlgorithms/MergeSort.js'\nimport {getBubbleSortAnimations} from '../SortingAlgorithms/BubbleSort.js'\nimport {getInsertionSortAnimations} from '../SortingAlgorithms/InsertionSort.js'\nimport {getSelectionSortAnimations} from '../SortingAlgorithms/SelectionSort.js'\nimport {getQuickSortAnimations} from '../SortingAlgorithms/QuickSort.js'\n\nconst ANIMATION_SPEED_MS = 10;\nconst NUMBER_OF_ARRAY_BARS = 69;\nconst MAX_HEIGHT_OF_BARS = 450;\nconst PRIMARY_COLOR = 'turquoise';\nconst SECONDARY_COLOR = 'blue';\nexport default class SortingVisualizer extends React.Component{\n    constructor(props){\n        super(props);\n\n        this.state = {\n            array: [],\n        };\n    }\n\n    componentDidMount(){\n        this.resetArray();\n    }\n\n    resetArray(){\n        const array = [];\n        for(let i = 0; i < NUMBER_OF_ARRAY_BARS; i++){\n            array.push(randomIntFromIntervals(5, MAX_HEIGHT_OF_BARS));\n        }\n        this.setState({array});\n    }\n\n\n    bubbleSort(){\n        const animations = getBubbleSortAnimations(this.state.array);\n        this.runAnimations(animations);\n    }\n\n    insertionSort(){\n        const animations = getInsertionSortAnimations(this.state.array);\n        this.runAnimations(animations);\n    }\n\n    mergeSort(){\n        const animations = getMergeSortAnimations(this.state.array);\n        this.runAnimations(animations);\n    }\n\n    selectionSort(){\n        const animations = getSelectionSortAnimations(this.state.array);\n        this.runAnimations(animations);\n    }\n\n    quickSort(){\n        const [animations,sortArray] = getQuickSortAnimations(this.state.array);\n        for (let i = 0; i < animations.length - 1; i++) {\n            const isColorChange = (i % 6 === 0) || (i % 6 === 1);\n            const arrayBars = document.getElementsByClassName('array-bar');\n            if(isColorChange === true) {\n                const color = (i % 6 === 0) ? SECONDARY_COLOR : PRIMARY_COLOR;\n                const [barOneIndex, barTwoIndex] = animations[i];\n                if(barOneIndex === -1) {\n                    continue;\n                }\n                const barOneStyle = arrayBars[barOneIndex].style;\n                const barTwoStyle = arrayBars[barTwoIndex].style;\n                setTimeout(() => {\n                    barOneStyle.backgroundColor = color;\n                    barTwoStyle.backgroundColor = color;\n                },i * ANIMATION_SPEED_MS);\n            }\n            else {\n                const [barIndex, newHeight] = animations[i];\n                if (barIndex === -1) {\n                    continue;\n                }\n                const barStyle = arrayBars[barIndex].style;\n                setTimeout(() => {\n                    barStyle.height = `${newHeight}px`;\n                },i * ANIMATION_SPEED_MS);  \n            }\n        }\n        const RESTORE_TIME = parseInt(ANIMATION_SPEED_MS*animations.length/2 + 3000);\n        setTimeout(() => RESTORE_TIME);  \n    }\n\n    heapSort(){\n\n    }\n\n    runAnimations(animations){\n        for (let i = 0; i < animations.length; i++) {\n            const arrayBars = document.getElementsByClassName('array-bar');\n            const isColorChange = i % 3 !== 2;\n            if (isColorChange) {\n              const [barOneIdx, barTwoIdx] = animations[i];\n              if(barOneIdx === -1){\n                  continue;\n              }\n              const barOneStyle = arrayBars[barOneIdx].style;\n              const barTwoStyle = arrayBars[barTwoIdx].style;\n              const color = i % 3 === 0 ? SECONDARY_COLOR : PRIMARY_COLOR;\n              setTimeout(() => {\n                barOneStyle.backgroundColor = color;\n                barTwoStyle.backgroundColor = color;\n              }, i * ANIMATION_SPEED_MS);\n            } else {\n              setTimeout(() => {\n                const [barOneIdx, newHeight] = animations[i];\n                const barOneStyle = arrayBars[barOneIdx].style;\n                barOneStyle.height = `${newHeight}px`;\n              }, i * ANIMATION_SPEED_MS);\n            }\n          }\n    }\n\n    refresh(){\n        window.location.reload();\n    }\n\n    \n    \n\n    render(){\n        const {array} = this.state;\n\n        return(\n            <div className=\"array-container\">                \n                    <div>\n                        <ul>\n                            <li><button onClick={() => this.resetArray()}>Generate New Array</button>  </li>\n                            <li><button onClick={() => this.bubbleSort()}>Bubble Sort</button></li>\n                            <li><button onClick={() => this.insertionSort()}>Insertion Sort</button></li>\n                            <li><button onClick={() => this.selectionSort()}>Selection Sort</button></li>\n                            <li><button onClick={() => this.mergeSort()}>Merge Sort</button></li>\n                            <li><button onClick={() => this.quickSort()}>Quick Sort</button></li>\n                            <li><button onClick={() => this.refresh()}>Refresh</button></li>\n                        </ul>\n                    \n                    {/* <button onClick={() => this.heapSort()}>Heap Sort (Coming Soon)</button>    * To Be Done */}\n                    </div>\n                    <div>\n                        {array.map((value, idx) => (\n                        <div className=\"array-bar\"\n                        key={idx}\n                        style={{height: `${value}px`,}}></div>\n                    ))}\n                    </div>\n            </div>\n        );\n    }\n}\n\n\nfunction randomIntFromIntervals(min, max){\n    return Math.floor(Math.random() * (max - min +1) + min);\n}","export function getInsertionSortAnimations(array){\n    const animations = [];\n    if (array.length <= 1){\n        return array\n    }\n    insertionSortHelper(array, animations);\n    return animations;\n}\n\n\n\nfunction insertionSortHelper(array, animations) {\n    const len = array.length;\n    for (let i = 0; i < len; i++) {\n      let num = array[i];\n      let j;\n  \n      for (j = i - 1; j >= 0 && array[j] > num; j--) {\n        animations.push([j + 1, j]);\n        animations.push([j + 1, j]);\n        animations.push([j + 1, array[j]]);\n        array[j + 1] = array[j];\n      }\n  \n      animations.push([j + 1, i]);\n      animations.push([j + 1, i]);\n      animations.push([j + 1, num]);\n      array[j + 1] = num;\n    }\n    return array;\n  }\n","export function getSelectionSortAnimations(array){\n    if (array.length <= 1)\n        return array;\n    const animations = [];\n    selectionsSortHelper(array, animations);\n    return animations;\n}\n\n\nfunction selectionsSortHelper(array, animations) {\n    for (let i = 0; i < array.length - 1; i++) {\n      let smallest = array[i];\n      let smallestIdx = i;\n      for (let j = i + 1; j < array.length; j++) {\n        animations.push([smallestIdx, j]);\n        animations.push([smallestIdx, j]);\n        animations.push([0, array[0]]);\n        if (array[j] < smallest) {\n          smallest = array[j];\n          smallestIdx = j;\n        }\n      }\n      animations.push([i, smallestIdx]);\n      animations.push([i, smallestIdx]);\n      animations.push([smallestIdx, array[i]]);\n      let temp = array[i];\n      array[i] = smallest;\n      array[smallestIdx] = temp;\n    }\n  }","import React from 'react';\nimport SortingVisualizer from './SortingVisualizer/SortingVisualizer'\nimport './App.css';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <h1>Welcome To The Sorting Visualizer...</h1>\n      <SortingVisualizer></SortingVisualizer>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}